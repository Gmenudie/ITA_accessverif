/* -- eval.y --       
   Evaluation d'une expression       
   Partie analyseur grammatical.    

   Utilisation : bison eval.y */

%{
#include <stdio.h>
#include "Automate.h"

/* Pré-déclarations */

int yylex();
void yyerror (Automate * , const char *);

/* Variable définie dans un autre fichier */
extern char* yytext;


%}

%defines /* Génère le fichier en-tête eval.tab.h */
%code requires { 
	#include <ppl.hh>
	#include <list>
	#include "Automate.h"
	#include "Etat.h"
	#include "Transition.h"
	#include "Assignement.h"

	using namespace Parma_Polyhedra_Library;
	using namespace std; 
}

%parse-param {Automate *automate}

%start  element /* Axiome de la grammaire */

%union{
  Constraint* c;
  Constraint_System* cs;
  Linear_Expression* e;
  int i;
  char* str;
  NNC_Polyhedron* p;
  Variable* v;
  Assignement* a;
  list<Assignement>* la;
}


%token<i> ENTIER
%token<str> NOM
%token<i> VAR

%token TAILLE  		
%token ETAT			
%token INITIAL			
%token FINAL			
%token TRANSITION		
%token CONDITIONS		
%token ASSIGNEMENTS	
%token OBRACE
%token EBRACE
%token MINEQUAL
%token SUPEQUAL

%type<p> conditions
%type<c> contrainte
%type<cs> contraintes
%type<a> formule
%type<la> assignements formules
%type<e> facteur expr terme


%%

elements   : element              
           | elements element   
           ;

element   : etats
          | transitions
          | taille
          ;

taille   : TAILLE ENTIER            
	{
		automate->setDimensions($2);
		std::list<Variable> variables;
        for (int i=0; i!=$2; i++){
            Variable A(i);
            variables.push_back(A);            
        }
        automate->setVariables(variables);

	}              
         ;

etats    : etat                      
		 | etats etat 				 
		 ;

etat     : ETAT NOM ENTIER           {automate->addEtat(Etat($2,$3));}
		 | ETAT INITIAL NOM ENTIER	 {automate->addEtatInitial(Etat($3,$4));}
		 | ETAT FINAL NOM ENTIER	 {automate->addEtatFinal(Etat($3,$4));}
         ;

transitions : transition
			| transitions transition
			;

transition  : TRANSITION OBRACE NOM NOM conditions assignements EBRACE  
  {
  	//Façon assez moche de procéder mais plutôt optimale. On passe une transition semi-complète à la classe automate qui se charge de la compléter.
  	Transition* transition = new Transition;
  	transition->setConditions(*$5);
  	transition->setAssignements(*$6);
  	automate->addTransition( transition, $3, $4 );
  }

            | TRANSITION OBRACE NOM NOM conditions EBRACE
  {
  	//Idem
  	Transition* transition  = new Transition;
  	transition->setConditions(*$5);
  	automate->addTransition( transition, $3, $4 );
  }
            ;

conditions  : CONDITIONS contraintes   {$$ = new NNC_Polyhedron (*$2);}
            ;

contraintes : contrainte     			{$$ = new Constraint_System (*$1) ;}
            | contraintes contrainte    {$1->insert(*$2) ;}
            ;

contrainte  : expr '=' expr ';'     	{$$ = new Constraint(*$1 == *$3);}
            | expr '<' expr ';'     	{$$ = new Constraint(*$1 < *$3);}
            | expr '>' expr ';'     	{$$ = new Constraint(*$1 > *$3);}
            | expr MINEQUAL expr ';'    {$$ = new Constraint(*$1 <= *$3);}
            | expr SUPEQUAL expr ';'    {$$ = new Constraint(*$1 >= *$3);}
            ;

assignements : ASSIGNEMENTS formules  {$$=$2;}
             ;

formules  : formule    				{ list<Assignement>* assignements = new list<Assignement>;
										assignements->push_back(*$1);
										$$ = assignements;
									}
          | formules formule   		{ $1->push_back(*$2) ;}
          ;

formule   : VAR "=" expr ';'		{$$ = new Assignement(Variable($1), *$3);}	
		  ;

expr      : expr '+' facteur		{$$ = new Linear_Expression(*$1 + *$3);}
          | expr '-' facteur		{$$ = new Linear_Expression(*$1 - *$3);}
          | facteur					{$$ = $1;}
          ;

facteur   : ENTIER '*' terme		{$$ = new Linear_Expression($1 * (*$3));}
          | ENTIER					{$$ = new Linear_Expression($1);}
          | VAR  					{$$ = new Linear_Expression(Variable($1));}
          ;

terme     : ENTIER					{$$ = new Linear_Expression($1);}
		  | VAR    					{$$ = new Linear_Expression(Variable($1));}
   		  ;





%%
#include <stdio.h>
#include "eval.tab.hpp"

void yyerror (Automate* automate,const char * error) 
{
    fprintf (stderr, "Erreur: %s sur l'expression %s\n", error, yytext);
}


